
```{r}
#Create the first plot to show MongoDB's growth
library(ggplot2)
annual_rev = c(40788, 65271, 114805, 166028, 267016, 421720) 
ggplot() +
  geom_col(aes(x = 2014:2019, y = annual_rev), color = "blue", alpha = .3) +
  theme_bw() +
  ggtitle("Revenue per Calendar Year") +
  ylab("Revenue in 1000s of USD") +
  xlab("Fiscal Year")

#Create the table that shows the year-over-year growth by quarter
library(knitr)
rolling_rev_growth = c(0.505881259, 0.507835663, 0.577190648, 0.504676956, 0.488792837,
                       0.61488764, 0.566356537, 0.897915233, 0.853676745, 0.728439729,
                       0.68409633, 0.444983857)
prd = c("Q1 2017", "Q2 2017", "Q3 2017", "Q4 2017", "Q1 2018", "Q2 2018", "Q3 2018", 
        "Q4 2018", "Q1 2019", "Q2 2019", "Q3 2019", "Q4 2019")
kable(x = cbind(prd, rolling_rev_growth), 
      col.names = c("Period", "Rolling Revenue Growth"), align = 'l')

#Plot the histogram of the sample data
ggplot() +
  geom_histogram(aes(rolling_rev_growth), color = "blue", alpha = .3,
                 binwidth = .1) +
  xlab("Growth") +
  ylab("Frequency")
  
#Calculate Sampling Distribution summary statistics
samp_theta = mean(rolling_rev_growth)
samp_sigma2 = var(rolling_rev_growth)

#Compute posterior summary statistics
mu_prior = .045
tau_sq_prior = .01
n = length(rolling_rev_growth)
#samp_sigma = sqrt(samp_sigma2)
post_theta = (1/ (1/(tau_sq_prior) + n/(samp_sigma2))) *
  (mu_prior/(tau_sq_prior) + sum(rolling_rev_growth)/(samp_sigma2))
post_tau = (1/(tau_sq_prior) + n/(samp_sigma2))^(-1)
post_sd = sqrt(post_tau)

#Compute posterior estimates with just year-end data
year_end_change = c(0.600250074, 0.75889752, 0.446173947,0.608258848, 0.579381011)
samp_theta2 = mean(year_end_change)
samp_sigma_sq2 = var(year_end_change)
samp_sigma_2 = sd(year_end_change)
n2 = length(year_end_change)
post_theta2 = (1/ (1/(tau_sq_prior) + n/(samp_sigma_sq2))) *
  (mu_prior/(tau_sq_prior) + sum(year_end_change)/(samp_sigma_sq2))
post_tau2 = (1/(tau_sq_prior) + n2/(samp_sigma_sq2))^(-1)
post_sd2 = sqrt(post_tau2)

#Create a table with the various posterior estimates if different prior variance numbers were used
prior_taus = c(.05, .10, .15, .2, .3)
post_thetas = c(.376, .527, .572, .590, .603)
post_taus = c(.032, .0391, .041, .0416, .0421)
kable(x = cbind(prior_taus, post_thetas, post_taus), 
      col.names = c("Prior Tau", "Post Theta", "Post Tau"), align = 'l',
      caption = "Posterior Parameters with Different Prior Variance")
   
#Create the densities corresponding to the table above and plot the distributions
dens_post05 = rnorm(n = 300, mean = post_thetas[1], sd = post_taus[1])
dens_post10 = rnorm(n = 300, mean = post_thetas[2], sd = post_taus[2])
dens_post15 = rnorm(n = 300, mean = post_thetas[3], sd = post_taus[3])
dens_post20 = rnorm(n = 300, mean = post_thetas[4], sd = post_taus[4])
dens_post30 = rnorm(n = 300, mean = post_thetas[5], sd = post_taus[5])
ggplot() +
  geom_density(aes(dens_post05, color = ".05")) +
  geom_density(aes(dens_post10, color = ".10")) +
  geom_density(aes(dens_post15, color = ".15")) +
  geom_density(aes(dens_post20, color = ".20")) +
  geom_density(aes(dens_post30, color = ".30")) +
  scale_color_manual("", breaks = c(".05", ".10", ".15", ".20", ".30"),
                     values = c("red", "magenta", "purple", "blue", "dark blue")) +
  xlab("Range for Posterior Average Growth Rate (Theta)") +
  ylab("Density") +
  ggtitle("Posterior Distribution Plots")
